/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package UserInterface.Consumer;

import Business.Consumer.Consumer;
import Business.Consumer.Order;
import Business.Consumer.OrderItem;
import Business.Enterprise.AdvertiserEnterprise;
import Business.Organization.Organization;
import Business.Organization.SalesOrganization;
import Business.Sales.Product;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Abhinav
 */
public class BrowseProductsJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private AdvertiserEnterprise enterprise;
    private Consumer consumer;
    private SalesOrganization organization = null;
    /**
     * Creates new form BrowseProductsJPanel
     */
    public BrowseProductsJPanel(JPanel upc, AdvertiserEnterprise enterprise, Consumer c) {
        initComponents();
        this.userProcessContainer = upc;
        this.enterprise = enterprise;
        this.consumer = c;
        
        getSalesOrganization();
        refreshProductTable();
        refreshOrderJTable();
    }
    
    private void getSalesOrganization()
    {
        for(Organization org : enterprise.getOrganizationDirectory().getOrganizationList())
        {
            if(org instanceof SalesOrganization)
            {
                organization = (SalesOrganization)org;
                break;
            }
        }
    }
    
    public void refreshProductTable()
    {
        DefaultTableModel dtm = (DefaultTableModel) productJTable.getModel();
        dtm.setRowCount(0);

        for(Product p : organization.getProductCatalog().getProductCatalog())
        {
            Object row[] = new Object[4];
            row[0] = p;
            row[1] = p.getModelNumber();
            row[2] = p.getPrice();
            row[3] = p.getAvail();
            
            dtm.addRow(row);
        }
    }
    private void refreshOrderJTable()
    {
        DefaultTableModel dtm = (DefaultTableModel) orderJTable.getModel();
        dtm.setRowCount(0);
        for(OrderItem oi : consumer.getOrder().getOrderItemList())
        {
            Object row[] = new Object[4];
            row[0] = oi;
            row[1] = oi.getProduct().getPrice();
            row[2] = oi.getQuantity();
            row[3] = oi.getSalePrice();
            dtm.addRow(row);
        }
    }
    
    private void calculateQuantitySold()
    {
        for(OrderItem oi : consumer.getOrder().getOrderItemList())
        {
            oi.getProduct().setQuantitySold(oi.getProduct().getQuantitySold() + oi.getQuantity());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        productJTable = new javax.swing.JTable();
        quantityJLabel = new javax.swing.JLabel();
        quantityJSpinner = new javax.swing.JSpinner();
        addToCartJButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        orderJTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        newQuantityJTextfield = new javax.swing.JTextField();
        modifyJButton = new javax.swing.JButton();
        checkoutJButton = new javax.swing.JButton();
        removeJButton = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        productJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "Product Id", "Price", "Availability"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(productJTable);

        quantityJLabel.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        quantityJLabel.setText("Quantity");

        addToCartJButton.setText("Add to Cart");
        addToCartJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToCartJButtonActionPerformed(evt);
            }
        });

        orderJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Item Name", "Price", "Quantity", "Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(orderJTable);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel1.setText("Shopping Cart");

        modifyJButton.setText("Modify");
        modifyJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyJButtonActionPerformed(evt);
            }
        });

        checkoutJButton.setText("Checkout");
        checkoutJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkoutJButtonActionPerformed(evt);
            }
        });

        removeJButton.setText("Remove");
        removeJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeJButtonActionPerformed(evt);
            }
        });

        backJButton.setText("<<Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel2.setText("Browse Products");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(newQuantityJTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(modifyJButton)
                            .addGap(18, 18, 18)
                            .addComponent(checkoutJButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(removeJButton))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(quantityJLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(quantityJSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(addToCartJButton))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(145, 145, 145)
                                .addComponent(jLabel2))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(backJButton)
                            .addComponent(jLabel1))))
                .addContainerGap(12, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(quantityJLabel)
                    .addComponent(quantityJSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addToCartJButton))
                .addGap(25, 25, 25)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(modifyJButton)
                    .addComponent(removeJButton)
                    .addComponent(checkoutJButton)
                    .addComponent(newQuantityJTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(54, 54, 54)
                .addComponent(backJButton)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addToCartJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToCartJButtonActionPerformed

        int quantity = (Integer)quantityJSpinner.getValue();
        int selectedRow = productJTable.getSelectedRow();
        if(selectedRow < 0)
        {
            JOptionPane.showMessageDialog(null, "Please select a product from the table");
            return;
        }
        Product p = (Product)productJTable.getValueAt(selectedRow, 0);
        if(quantity<=0 || quantity>p.getAvail())
        {
            JOptionPane.showMessageDialog(null, "Please check quantity and availability of the product");
            return;
        }

        boolean flag = true;
        ArrayList<OrderItem> oiList = consumer.getOrder().getOrderItemList();
        for(OrderItem orderItem : oiList)
        {
            if(orderItem.getProduct() == p)
            {
                int oldQuantity = orderItem.getQuantity();
                int newQuantity = quantity + oldQuantity;
                orderItem.setQuantity(newQuantity);
                p.setAvail(p.getAvail() - quantity);
                flag = false;

            }
        }
        if(flag)
        {
            OrderItem oi = consumer.getOrder().addOrderItem(p, quantity);
            p.setAvail(p.getAvail() - quantity);

        }
        String caption = "You have added the product : " + p + " with quantity " + quantity + "";
        JOptionPane.showMessageDialog(null, caption);
        refreshOrderJTable();
        refreshProductTable();
    }//GEN-LAST:event_addToCartJButtonActionPerformed

    private void modifyJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyJButtonActionPerformed

        String modifiedQuantityString = newQuantityJTextfield.getText();
        if(modifiedQuantityString.trim().isEmpty())
        {
            JOptionPane.showMessageDialog(null, "Please enter a modified quantity value");
            return;
        }
        try
        {
            int modifiedQuantity = Integer.parseInt(modifiedQuantityString);
            int selectedRow = orderJTable.getSelectedRow();
            if(selectedRow < 0)
            {
                JOptionPane.showMessageDialog(null, "Please select an item to modify");
                return;
            }
            OrderItem oi = (OrderItem)orderJTable.getValueAt(selectedRow, 0);

            if(modifiedQuantity > oi.getQuantity())
            {

                int value = modifiedQuantity - oi.getQuantity();
                if(oi.getProduct().getAvail() < value)
                {
                    JOptionPane.showMessageDialog(null, "Not enough quantity in stock");
                    return;
                }
                oi.setQuantity(modifiedQuantity);
                int avail = oi.getProduct().getAvail();
                int newavail = avail - value;
                oi.getProduct().setAvail(newavail);

            }
            else
            {
                int value = oi.getQuantity() - modifiedQuantity;
                oi.setQuantity(modifiedQuantity);
                int avail = oi.getProduct().getAvail();
                int newavail = avail + value;
                oi.getProduct().setAvail(newavail);

            }
            refreshOrderJTable();
            refreshProductTable();
        }
        catch(NumberFormatException e)
        {
            JOptionPane.showMessageDialog(null, "Please enter a valid value");
            return;
        }
    }//GEN-LAST:event_modifyJButtonActionPerformed

    private void checkoutJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkoutJButtonActionPerformed

        if(!consumer.getOrder().getOrderItemList().isEmpty())
        {
            calculateQuantitySold();
            organization.setConsumerPurchases(organization.getConsumerPurchases() + 1);
            JOptionPane.showMessageDialog(null, "Items successfully purchased");
            consumer.setOrder(new Order());
            refreshOrderJTable();
        }
    }//GEN-LAST:event_checkoutJButtonActionPerformed

    private void removeJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeJButtonActionPerformed

        int selectedRow = orderJTable.getSelectedRow();
        if(selectedRow < 0)
        {
            JOptionPane.showMessageDialog(null, "Please select an item from the table");
            return;

        }
        OrderItem oi = (OrderItem) orderJTable.getValueAt(selectedRow, 0);
        consumer.getOrder().removeOrderItem(oi);
        refreshOrderJTable();
        refreshProductTable();
    }//GEN-LAST:event_removeJButtonActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addToCartJButton;
    private javax.swing.JButton backJButton;
    private javax.swing.JButton checkoutJButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton modifyJButton;
    private javax.swing.JTextField newQuantityJTextfield;
    private javax.swing.JTable orderJTable;
    private javax.swing.JTable productJTable;
    private javax.swing.JLabel quantityJLabel;
    private javax.swing.JSpinner quantityJSpinner;
    private javax.swing.JButton removeJButton;
    // End of variables declaration//GEN-END:variables
}
